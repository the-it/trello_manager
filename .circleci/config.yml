version: 2.1

references:

python_image: &python_image
                circleci/python:3.8

aws_image: &aws_image
             amazon/aws-cli:latest

working_directory: &working_directory
                     ~/repo

repo_cache_key: &repo_cache_key
                  v3-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

lambda_build: &lambda_build
  run:
    name: lambda build
    command: ./run.sh build

install_dep: &install_dep
  run:
    name: Install dependencies
    command: yum install -y tar gzip

push_tst: &push_tst
  run:
    name: push code to tst bucket
    command: ./run.sh push tst

push_prd: &push_prd
  run:
    name: push code to prd bucket
    command: ./run.sh push prd

save_workspace: &save_workspace
  persist_to_workspace:
    root: build/zip
    paths:
      - trello_manager.zip

restore_workspace: &restore_workspace
  attach_workspace:
    at: build/zip

install_dependencies: &install_dependencies
  run:
    name: install dependencies
    command: |
      python3 -m venv venv
      . venv/bin/activate
      make pip3-dev
      pip list

run_coverage: &run_coverage
  run:
    name: run coverage
    command: |
      . venv/bin/activate
      make coverage

report_codecov: &report_codecov
  run:
    name: report codecov
    command: |
      . venv/bin/activate
      make codecov

show_python_version: &show_python_version
  run:
    name: python version
    command: |
      python --version

flake8: &flake8
  run:
    name: flake8
    when: always
    command: |
      . venv/bin/activate
      make flake8

pycodestyle: &pycodestyle
  run:
    name: pycodestyle
    when: always
    command: |
      . venv/bin/activate
      make pycodestyle

pylint: &pylint
  run:
    name: pylint
    when: always
    command: |
      . venv/bin/activate
      make pylint

mypy: &mypy
  run:
    name: mypy
    when: always
    command: |
      . venv/bin/activate
      make mypy

safety: &safety
  run:
    name: safety
    when: always
    command: |
      . venv/bin/activate
      make safety


# defining the steps for each job

coverage_steps: &coverage_steps
  steps:
    - checkout
    - *restore_repo
    - *install_dependencies
    - *show_python_version
    - *flake8
    - *pylint
    - *mypy
    - *pycodestyle
    - *safety
    - *run_coverage
    - *report_codecov
    - *save_repo

build_steps: &build_steps
  steps:
    - *restore_repo
    - *lambda_build
    - *save_workspace

push_tst_steps: &push_tst_steps
  steps:
    - *install_dep
    - checkout
    - *restore_workspace
    - *push_tst

push_prd_steps: &push_prd_steps
  steps:
    - *install_dep
    - checkout
    - *restore_workspace
    - *push_prd

# job definitions

jobs:
  coverage:
    docker:
      - image: *python_image
    working_directory: *working_directory
    <<: *coverage_steps

  build:
    docker:
      - image: *python_image
    working_directory: *working_directory
    <<: *build_steps

  push_tst:
    docker:
      - image: *aws_image
    working_directory: *working_directory
    <<: *push_tst_steps

  push_prd:
    docker:
      - image: *aws_image
    working_directory: *working_directory
    <<: *push_prd_steps

# dependencies for the workflow

workflows:
  version: 2
  test and send to cloud:
    jobs:
      - coverage:
          context: trello
      - build:
          requires:
            - coverage
      - push_tst:
          context:
            - trello
            - trello_manager_push_tst
          requires:
            - build
      - push_prd:
          context:
            - trello
            - trello_manager_push_prd
          requires:
            - build
          filters:
            branches:
              only: main
